{
  "version": 3,
  "sources": ["../../.yarn/__virtual__/use-resize-observer-virtual-8e7f88ff14/0/cache/use-resize-observer-npm-8.0.0-3d864e4f2b-944ce47811.zip/node_modules/use-resize-observer/dist/bundle.esm.js", "dep:use-resize-observer"],
  "sourcesContent": ["import { useRef, useState, useEffect, useCallback, useMemo } from 'react';\n\n// This of course could've been more streamlined with internal state instead of\n// refs, but then host hooks / components could not opt out of renders.\n// This could've been exported to its own module, but the current build doesn't\n// seem to work with module imports and I had no more time to spend on this...\nfunction useResolvedElement(subscriber, refOrElement) {\n  var callbackRefElement = useRef(null);\n  var lastReportRef = useRef(null);\n  var cleanupRef = useRef();\n  var callSubscriber = useCallback(function () {\n    var element = null;\n\n    if (callbackRefElement.current) {\n      element = callbackRefElement.current;\n    } else if (refOrElement) {\n      if (refOrElement instanceof HTMLElement) {\n        element = refOrElement;\n      } else {\n        element = refOrElement.current;\n      }\n    }\n\n    if (lastReportRef.current && lastReportRef.current.element === element && lastReportRef.current.reporter === callSubscriber) {\n      return;\n    }\n\n    if (cleanupRef.current) {\n      cleanupRef.current(); // Making sure the cleanup is not called accidentally multiple times.\n\n      cleanupRef.current = null;\n    }\n\n    lastReportRef.current = {\n      reporter: callSubscriber,\n      element: element\n    }; // Only calling the subscriber, if there's an actual element to report.\n\n    if (element) {\n      cleanupRef.current = subscriber(element);\n    }\n  }, [refOrElement, subscriber]); // On each render, we check whether a ref changed, or if we got a new raw\n  // element.\n\n  useEffect(function () {\n    // With this we're *technically* supporting cases where ref objects' current value changes, but only if there's a\n    // render accompanying that change as well.\n    // To guarantee we always have the right element, one must use the ref callback provided instead, but we support\n    // RefObjects to make the hook API more convenient in certain cases.\n    callSubscriber();\n  }, [callSubscriber]);\n  return useCallback(function (element) {\n    callbackRefElement.current = element;\n    callSubscriber();\n  }, [callSubscriber]);\n}\n\n// We're only using the first element of the size sequences, until future versions of the spec solidify on how\n// exactly it'll be used for fragments in multi-column scenarios:\n// From the spec:\n// > The box size properties are exposed as FrozenArray in order to support elements that have multiple fragments,\n// > which occur in multi-column scenarios. However the current definitions of content rect and border box do not\n// > mention how those boxes are affected by multi-column layout. In this spec, there will only be a single\n// > ResizeObserverSize returned in the FrozenArray, which will correspond to the dimensions of the first column.\n// > A future version of this spec will extend the returned FrozenArray to contain the per-fragment size information.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-entry-interface)\n//\n// Also, testing these new box options revealed that in both Chrome and FF everything is returned in the callback,\n// regardless of the \"box\" option.\n// The spec states the following on this:\n// > This does not have any impact on which box dimensions are returned to the defined callback when the event\n// > is fired, it solely defines which box the author wishes to observe layout changes on.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// I'm not exactly clear on what this means, especially when you consider a later section stating the following:\n// > This section is non-normative. An author may desire to observe more than one CSS box.\n// > In this case, author will need to use multiple ResizeObservers.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// Which is clearly not how current browser implementations behave, and seems to contradict the previous quote.\n// For this reason I decided to only return the requested size,\n// even though it seems we have access to results for all box types.\n// This also means that we get to keep the current api, being able to return a simple { width, height } pair,\n// regardless of box option.\nvar extractSize = function extractSize(entry, boxProp, sizeType) {\n  if (!entry[boxProp]) {\n    if (boxProp === \"contentBoxSize\") {\n      // The dimensions in `contentBoxSize` and `contentRect` are equivalent according to the spec.\n      // See the 6th step in the description for the RO algorithm:\n      // https://drafts.csswg.org/resize-observer/#create-and-populate-resizeobserverentry-h\n      // > Set this.contentRect to logical this.contentBoxSize given target and observedBox of \"content-box\".\n      // In real browser implementations of course these objects differ, but the width/height values should be equivalent.\n      return entry.contentRect[sizeType === \"inlineSize\" ? \"width\" : \"height\"];\n    }\n\n    return undefined;\n  } // A couple bytes smaller than calling Array.isArray() and just as effective here.\n\n\n  return entry[boxProp][0] ? entry[boxProp][0][sizeType] : // TS complains about this, because the RO entry type follows the spec and does not reflect Firefox's current\n  // behaviour of returning objects instead of arrays for `borderBoxSize` and `contentBoxSize`.\n  // @ts-ignore\n  entry[boxProp][sizeType];\n};\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver.\n  var onResize = opts.onResize;\n  var onResizeRef = useRef(undefined);\n  onResizeRef.current = onResize;\n  var round = opts.round || Math.round; // Using a single instance throughout the hook's lifetime\n\n  var resizeObserverRef = useRef();\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // In certain edge cases the RO might want to report a size change just after\n  // the component unmounted.\n\n\n  var didUnmount = useRef(false);\n  useEffect(function () {\n    return function () {\n      didUnmount.current = true;\n    };\n  }, []); // Using a ref to track the previous width / height to avoid unnecessary renders.\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  }); // This block is kinda like a useEffect, only it's called whenever a new\n  // element could be resolved based on the ref option. It also has a cleanup\n  // function.\n\n  var refCallback = useResolvedElement(useCallback(function (element) {\n    // We only use a single Resize Observer instance, and we're instantiating it on demand, only once there's something to observe.\n    // This instance is also recreated when the `box` option changes, so that a new observation is fired if there was a previously observed element with a different box option.\n    if (!resizeObserverRef.current || resizeObserverRef.current.box !== opts.box || resizeObserverRef.current.round !== round) {\n      resizeObserverRef.current = {\n        box: opts.box,\n        round: round,\n        instance: new ResizeObserver(function (entries) {\n          var entry = entries[0];\n          var boxProp = opts.box === \"border-box\" ? \"borderBoxSize\" : opts.box === \"device-pixel-content-box\" ? \"devicePixelContentBoxSize\" : \"contentBoxSize\";\n          var reportedWidth = extractSize(entry, boxProp, \"inlineSize\");\n          var reportedHeight = extractSize(entry, boxProp, \"blockSize\");\n          var newWidth = reportedWidth ? round(reportedWidth) : undefined;\n          var newHeight = reportedHeight ? round(reportedHeight) : undefined;\n\n          if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n            var newSize = {\n              width: newWidth,\n              height: newHeight\n            };\n            previous.current.width = newWidth;\n            previous.current.height = newHeight;\n\n            if (onResizeRef.current) {\n              onResizeRef.current(newSize);\n            } else {\n              if (!didUnmount.current) {\n                setSize(newSize);\n              }\n            }\n          }\n        })\n      };\n    }\n\n    resizeObserverRef.current.instance.observe(element, {\n      box: opts.box\n    });\n    return function () {\n      if (resizeObserverRef.current) {\n        resizeObserverRef.current.instance.unobserve(element);\n      }\n    };\n  }, [opts.box, round]), opts.ref);\n  return useMemo(function () {\n    return {\n      ref: refCallback,\n      width: size.width,\n      height: size.height\n    };\n  }, [refCallback, size ? size.width : null, size ? size.height : null]);\n}\n\nexport { useResizeObserver as default };\n", "import d from \"../.yarn/__virtual__/use-resize-observer-virtual-8e7f88ff14/0/cache/use-resize-observer-npm-8.0.0-3d864e4f2b-944ce47811.zip/node_modules/use-resize-observer/dist/bundle.esm.js\";export default d;"],
  "mappings": "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",
  "names": []
}
